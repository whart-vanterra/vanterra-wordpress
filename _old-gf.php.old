<?php
/**
 * Plugin Name: Vanterra Gravity Forms — First/Last Touch Tracking
 * Description: Creates a Gravity Forms form with basic lead fields + hidden first/last-touch attribution fields. Captures UTM/click IDs into 1st‑party cookies and auto-populates hidden fields on the form.
 * Version: 0.1.0
 * Author: Will + ChatGPT
 * License: GPL2+
 */

if (!defined('ABSPATH')) { exit; }

class Vanterra_GF_Attribution_Plugin {
	const OPTION_KEY = 'vanterra_gf_form_id';
	const COOKIE_PREFIX = 'vt_';

	// List of URL params we care about (feel free to edit)
	private $track_params = [
		'utm_source','utm_medium','utm_campaign','utm_content','utm_term',
		'gclid','msclkid','fbclid','ttclid','yclid','li_fat_id',
		'gbraid','wbraid', 'ga_client_id', 'utm_adgroup'
	];

	public function __construct() {
		add_action('plugins_loaded', [$this, 'maybe_register_hooks']);
	}

	public function maybe_register_hooks() {
		if (!class_exists('GFAPI')) {
			add_action('admin_notices', function(){
				echo '<div class="notice notice-error"><p><strong>Vanterra GF Tracking</strong> requires <em>Gravity Forms</em>. Please install/activate it.</p></div>';
			});
			return;
		}

		// Try to create form immediately if it doesn't exist
		$this->maybe_create_form();

		// Front-end assets to handle cookies/params
		add_action('wp_enqueue_scripts', [$this, 'enqueue_scripts']);

		// Populate hidden fields before render (front-end + admin preview)
		add_filter('gform_pre_render', [$this, 'inject_hidden_defaults']);
		add_filter('gform_pre_validation', [$this, 'inject_hidden_defaults']);
		add_filter('gform_admin_pre_render', [$this, 'inject_hidden_defaults']);

		// Server-side safety net to backfill values just before entry is saved
		add_action('gform_after_submission', [$this, 'after_submission_backfill'], 10, 2);
	}

	public function maybe_create_form() {
		if (!class_exists('GFAPI')) { return false; }

		$form_id = get_option(self::OPTION_KEY);
		if ($form_id && GFAPI::get_form($form_id)) {
			return $form_id; // already exists
		}

		$form = [
			'title'       => 'Lead — Vanterra (Tracked)',
			'description' => 'Basic lead form with first/last touch tracking.',
			'fields'      => $this->get_form_fields(),
			'labelPlacement' => 'top_label',
			'button'      => [ 'type' => 'text', 'text' => 'Get My Free Inspection' ],
		];

		$result = GFAPI::add_form($form);
		if (!is_wp_error($result)) {
			update_option(self::OPTION_KEY, $result);
			return $result;
		}
		return false;
	}

	private function get_form_fields() {
		$fields = [];

		// Name (first/last)
        $fields[] = [
            'id' => 1,
            'type' => 'name',
            'label' => 'Name',
            'required' => true,
            'inputs' => [
                [ 'id' => 1.3, 'label' => 'First' ],
                [ 'id' => 1.6, 'label' => 'Last'  ],
            ],
        ];


		// Email
		$fields[] = [
			'id' => 2,
			'type' => 'email',
			'label' => 'Email',
			'required' => true, 
		];

		// Phone
		$fields[] = [
			'id' => 3,
			'type' => 'phone',
			'label' => 'Phone',
			'required' => true,
			'phoneFormat' => 'standard', 
		];
 
        // Address
        $fields[] = [
        'id' => 4,
        'type' => 'address',
        'label' => 'Address',
        'required' => true,
        'addressType' => 'us',
        'inputs' => [
            [ 'id' => 4.1, 'label' => 'Street Address' ],
            [ 'id' => 4.2, 'label' => 'Address Line 2' ],
            [ 'id' => 4.3, 'label' => 'City' ],
            [ 'id' => 4.4, 'label' => 'State / Province' ],
            [ 'id' => 4.5, 'label' => 'ZIP / Postal Code' ],
            [ 'id' => 4.6, 'label' => 'Country' ],
        ],
        ];

		// Service (dropdown)
		$fields[] = [
			'id' => 5,
			'type' => 'select',
			'label' => 'Service',
			'required' => true,
			'choices' => [
				[ 'text' => 'Foundation Repair', 'value' => 'foundation_repair' ],
				[ 'text' => 'Basement Waterproofing', 'value' => 'basement_waterproofing' ],
				[ 'text' => 'Crawl Space Encapsulation', 'value' => 'crawl_space' ],
				[ 'text' => 'Concrete Lifting', 'value' => 'concrete_lifting' ],
			], 
		];

		// Comment
		$fields[] = [
			'id' => 6,
			'type' => 'textarea',
			'label' => 'Tell us about your issue',
			'required' => false,
			'placeholder' => 'Briefly describe what youre seeing…',

		];

		// Hidden tracking fields — FIRST touch
		$hidden_first = [
			'first_utm_source','first_utm_medium','first_utm_campaign','first_utm_content','first_utm_term','first_ga_client_id', 'first_utm_adgroup',
			'first_gclid','first_msclkid','first_fbclid','first_ttclid','first_yclid','first_li_fat_id','first_gbraid','first_wbraid',
			'first_landing_page','first_referrer','first_touch_time','first_client_id','first_session_id'
		];

		// Hidden tracking fields — LAST touch
		$hidden_last = [
			'last_utm_source','last_utm_medium','last_utm_campaign','last_utm_content','last_utm_term', 'last_ga_client_id', 'last_utm_adgroup',
			'last_gclid','last_msclkid','last_fbclid','last_ttclid','last_yclid','last_li_fat_id','last_gbraid','last_wbraid',
			'last_landing_page','last_referrer','last_touch_time','last_client_id','last_session_id'
		];

		$idx = 100; // start id range for hidden fields
		foreach (array_merge($hidden_first, $hidden_last) as $slug) {
			$fields[] = [
				'id' => $idx++,
				'label' => $slug,
				'type' => 'hidden',
				'inputName' => $slug, // entry meta key
				'allowsPrepopulate' => true,
				'defaultValue' => '', 
			];
		}

		return $fields;
	}

	public function enqueue_scripts() {
		wp_enqueue_script(
			'vanterra-attribution-tracker',
			plugin_dir_url(__FILE__) . 'attribution-tracker.js',
			[],
			'1.0.0',
			true
		);
	}

	public function inject_hidden_defaults($form) {
		if (!$form) return $form;

		foreach ($form['fields'] as &$field) {
			if ($field->type === 'hidden' && !empty($field->inputName)) {
				$cookie_name = self::COOKIE_PREFIX . $field->inputName;
				if (isset($_COOKIE[$cookie_name])) {
					$field->defaultValue = sanitize_text_field($_COOKIE[$cookie_name]);
				}
			}
		}

		return $form;
	}

	public function after_submission_backfill($entry, $form) {
		$updated = false;
		
		foreach ($form['fields'] as $field) {
			if ($field->type === 'hidden' && !empty($field->inputName)) {
				$field_value = rgar($entry, $field->id);
				
				if (empty($field_value)) {
					$cookie_name = self::COOKIE_PREFIX . $field->inputName;
					if (isset($_COOKIE[$cookie_name])) {
						$entry[$field->id] = sanitize_text_field($_COOKIE[$cookie_name]);
						$updated = true;
					}
				}
			}
		}

		if ($updated) {
			GFAPI::update_entry($entry);
		}
	}
}

new Vanterra_GF_Attribution_Plugin();

// --- Helpers -----------------------------------------------------------------
// Shortcode to render the created form easily: [vanterra_gf_form]
add_shortcode('vanterra_gf_form', function(){
	$form_id = get_option(Vanterra_GF_Attribution_Plugin::OPTION_KEY);
	if (!$form_id) { return '<em>Form not created yet. Activate the plugin again or check Gravity Forms installation.</em>'; }
	// Use native Gravity Forms shortcode if available
	if (function_exists('gravity_form')) {
		ob_start();
		gravity_form($form_id, false, false, false, null, true);
		return ob_get_clean();
	}
	return do_shortcode('[gravityform id="'.$form_id.'" title="false" description="false" ajax="true"]');
});
